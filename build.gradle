buildscript {
    ext.kotlin_version = '1.4.0'

    repositories {
        mavenCentral()
        maven {
            name 'JFrog OSS snapshot repo'
            url  'https://oss.jfrog.org/oss-snapshot-local/'
        }
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

def c3Version = '0.1.2'

task version {
    doLast {
        print "Version ${c3Version}"
    }
}

apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'maven'
apply plugin: 'idea'

group = 'me.tomassetti.antlr4c3'
version = c3Version    

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
  antlr "org.antlr:antlr4:4.5.1"
  compile "org.antlr:antlr4-runtime:4.5.1"
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
  compile 'com.fifesoft:rsyntaxtextarea:2.5.8'
  compile 'com.fifesoft:autocomplete:2.5.8'
  compile 'me.tomassetti:kolasu:0.1.1'
  compile group: 'org.javassist', name: 'javassist', version: '3.21.0-GA'
  testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
  testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
  testCompile 'junit:junit:4.12'
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ['-package', 'me.tomassetti.antlr4c3']
    outputDirectory = new File("generated-src/antlr/main/me/tomassetti/antlr4c3".toString())
}

generateTestGrammarSource {
    maxHeapSize = "64m"
    arguments += ['-package', 'me.tomassetti.antlr4c3']
    outputDirectory = new File("generated-src/antlr/test/me/tomassetti/antlr4c3".toString())
}

compileJava.dependsOn generateGrammarSource
compileKotlin.dependsOn generateGrammarSource
compileTestJava.dependsOn generateTestGrammarSource
compileTestKotlin.dependsOn generateTestGrammarSource
sourceSets {
    generated {
        java.srcDir 'generated-src/antlr/main/'
    }
    testGenerated {
        java.srcDir 'generated-src/antlr/test/'  
    }
}
compileJava.source sourceSets.generated.java, sourceSets.main.java
compileTestJava.source sourceSets.testGenerated.java, sourceSets.test.java

clean{
    delete "generated-src"
}

idea {
    module {
        sourceDirs += file("generated-src/antlr/main")
        testSourceDirs += file("generated-src/antlr/test")        
    }
}

sourceSets {
    main {
        java {
            srcDirs 'generated-src/antlr/main'
        }
        kotlin {
            srcDirs 'src/main/kotlin'
        }
    }
    test {
        java {
            srcDirs 'generated-src/antlr/test'
        }
        kotlin {
            srcDirs 'src/test/kotlin'
        }   
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

task generatePom {
    doLast {
        def generatedPom = pom {
            project {
                name project.name
                description 'ANTLR4-C3 provides autocompletion for ANTLR4 projects'
                version c3Version
                packaging 'jar'
                url 'https://github.com/ftomassetti/antlr4-c3-kotlin'

                scm {
                    connection 'scm:git:https://github.com/ftomassetti/antlr4-c3-kotlin.git'
                    developerConnection 'scm:git:git@github.com:ftomassetti/antlr4-c3-kotlin.git'
                    url 'https://github.com/ftomassetti/antlr4-c3-kotlin.git'
                }

                licenses {
                    license {
                        name 'The MIT License (MIT)'
                        url 'http://opensource.org/licenses/MIT'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'ftomassetti'
                        name = 'Federico Tomassetti'
                        email = 'federico@tomassetti.me'
                    }
                }
            }
        }
        generatedPom.writeTo("$buildDir/pom.xml")
    }
}